const { SlashCommandBuilder, PermissionFlagsBits, PermissionsBitField } = require('discord.js')

module.exports = {
    data: new SlashCommandBuilder()
        .setName("notify")
        .setNameLocalizations({
            "pt-BR": 'notificar',
            "es-ES": 'notificar',
            "fr": 'notifier',
            "it": 'notificare',
            "ru": '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        })
        .setDescription("‚å†üíÇ‚å° (Dis)Enable announces for free games")
        .setDescriptionLocalizations({
            "pt-BR": '‚å†üíÇ‚å° (Des)Habilitar an√∫ncio de games free',
            "es-ES": '‚å†üíÇ‚å° (Des)Habilitar anuncios para juegos gratis',
            "fr": '‚å†üíÇ‚å° (D√©s)activer les publicit√©s pour les jeux gratuits',
            "it": '‚å†üíÇ‚å° (Dis) Abilita annunci di giochi gratuiti',
            "ru": '‚å†üíÇ‚å° (Dis)–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä'
        })
        .addRoleOption(option =>
            option.setName("role")
                .setNameLocalizations({
                    "pt-BR": 'cargo',
                    "es-ES": 'rol',
                    "it": 'roule',
                    "ru": '—Ä–æ–ª—å'
                })
                .setDescription("The role that will be notified")
                .setDescriptionLocalizations({
                    "pt-BR": 'O cargo que ser√° notificado',
                    "es-ES": 'El rol a ser notificado',
                    "fr": 'Le role qui sera notifi√©',
                    "it": 'La roule da notificare',
                    "ru": '–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å'
                }))
        .addChannelOption(option =>
            option.setName("channel")
                .setNameLocalizations({
                    "pt-BR": 'canal',
                    "es-ES": 'canal',
                    "fr": 'salon',
                    "it": 'canale',
                    "ru": '–∫–∞–Ω–∞–ª'
                })
                .setDescription("The channel that will be used")
                .setDescriptionLocalizations({
                    "pt-BR": 'O canal que ser√° usado',
                    "es-ES": 'El canal que se utilizar√°',
                    "fr": 'Le canal qui sera utilis√©',
                    "it": 'Il canale che verr√† utilizzato',
                    "ru": '–ö–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è'
                }))
        .addStringOption(option =>
            option.setName("language")
                .setNameLocalizations({
                    "pt-BR": 'idioma',
                    "es-ES": 'idioma',
                    "fr": 'langue',
                    "it": 'linguaggio',
                    "ru": '—è–∑—ã–∫'
                })
                .setDescription("The language to be used")
                .setDescriptionLocalizations({
                    "pt-BR": 'O idioma que ser√° utilizado',
                    "es-ES": 'El lenguaje a utilizar',
                    "fr": 'La langue √† utiliser',
                    "it": 'La lingua da usare',
                    "ru": '–Ø–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è'
                })
                .addChoices(
                    { name: 'Alons√™s', value: 'al-br' },
                    { name: 'English', value: 'en-us' },
                    { name: 'Espa√±ol', value: 'es-es' },
                    { name: 'Fran√ßais', value: 'fr-fr' },
                    { name: 'Italiano', value: 'it-it' },
                    { name: 'Portugu√™s', value: 'pt-br' },
                    { name: '–†—É—Å—Å–∫–∏–π', value: 'ru-ru' }
                )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild | PermissionFlagsBits.Administrator),
    async execute(client, user, interaction) {

        const membro_sv = await client.getUserGuild(interaction, interaction.user.id)

        // Libera configura√ß√£o para propriet√°rios e adms apenas
        if (!membro_sv.permissions.has(PermissionsBitField.Flags.ManageChannels) && interaction.user.id !== client.owners[0])
            return client.tls.reply(interaction, user, "mode.anuncio.permissao", true, 3)

        let guild = await client.getGuild(interaction.guild.id)

        const valores = {
            role: interaction.options.getRole("role"),
            channel: interaction.options.getChannel("channel"),
            lang: interaction.options.getString("language")
        }

        if (valores.role) {
            valores.role = valores.role.id
            guild.games.role = valores.role
        }

        if (valores.channel) {

            // Tipo 0 -> Canal de texto tipo normal
            // Tipo 5 -> Canal de texto tipo an√∫ncios
            if (valores.channel.type !== 0 && valores.channel.type !== 5) // Verificando se o canal mencionado √© inv√°lido
                return client.tls.reply(interaction, user, "mode.anuncio.tipo_canal", true, 0)

            valores.channel = valores.channel.id
            guild.games.channel = valores.channel
        }

        if (!guild.lang)
            guild.lang = client.idioma.getLang(interaction)

        let mensagem = `:video_game: | O Servidor ( \`${interaction.guild.name}\` | \`${interaction.guild.id}\` ) n√£o recebe mais atts de jogos gr√°tis`

        // (Des)ativando os an√∫ncios de games do servidor
        if (!valores.channel || !valores.role)
            guild.conf.games = false
        else {
            guild.conf.games = true
            mensagem = `:video_game: | O Servidor ( \`${interaction.guild.name}\` | \`${interaction.guild.id}\` ) agora recebe atts de jogos gr√°tis`
        }

        client.notify(process.env.channel_feeds, mensagem)

        let feedback_user = client.tls.phrase(user, "mode.anuncio.anuncio_games")

        // An√∫ncios de game desligados
        if (!guild.conf.games)
            feedback_user = `:mobile_phone_off: | ${client.tls.phrase(user, "mode.anuncio.anuncio_off")}`

        await guild.save()
        interaction.reply({ content: client.replace(feedback_user, `<#${guild.games.channel}>`), ephemeral: true })
    }
}