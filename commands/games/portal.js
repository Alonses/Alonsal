const { SlashCommandBuilder, EmbedBuilder } = require('discord.js')

module.exports = {
    data: new SlashCommandBuilder()
        .setName("portal")
        .setDescription("‚å†üé≤‚å° View the coordinate for a portal")
        .setDescriptionLocalizations({
            "de": '‚å†üé≤‚å° Sehen Sie sich die Koordinaten eines Portals an',
            "es-ES": '‚å†üé≤‚å° Ver las coordenadas de un portal',
            "fr": '‚å†üé≤‚å° Voir les coordonn√©es d\'un portail',
            "it": '‚å†üé≤‚å° Vedi le coordinate di un portale',
            "pt-BR": '‚å†üé≤‚å° Veja a coordenada para um portal',
            "ru": '‚å†üé≤‚å° –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Ä—Ç–∞–ª–∞',
        })
        .addIntegerOption(option =>
            option.setName("x")
                .setDescription("The x position in the current dimension")
                .setDescriptionLocalizations({
                    "de": 'Die Position von x in der aktuellen Dimension',
                    "es-ES": 'La posici√≥n de x en la dimensi√≥n actual.',
                    "fr": 'La position de x dans la dimension actuelle',
                    "it": 'La posizione di x nella dimensione corrente',
                    "pt-BR": 'A posi√ß√£o x na dimens√£o atual',
                    "ru": '–ü–æ–ª–æ–∂–µ–Ω–∏–µ x –≤ —Ç–µ–∫—É—â–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏'
                })
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName("z")
                .setDescription("The z position in the current dimension")
                .setDescriptionLocalizations({
                    "de": 'Die Position von z in der aktuellen Dimension',
                    "es-ES": 'La posici√≥n de z en la dimensi√≥n actual.',
                    "fr": 'La position de z dans la dimension actuelle',
                    "it": 'La posizione di z nella dimensione corrente',
                    "pt-BR": 'A posi√ß√£o z na dimens√£o atual',
                    "ru": '–ü–æ–ª–æ–∂–µ–Ω–∏–µ z –≤ —Ç–µ–∫—É—â–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏'
                })
                .setRequired(true))
        .addStringOption(option =>
            option.setName("destiny")
                .setNameLocalizations({
                    "de": 'ziel',
                    "es-ES": 'destino',
                    "fr": 'destin',
                    "it": 'destino',
                    "pt-BR": 'destino',
                    "ru": '—Å—É–¥—å–±–∞',
                })
                .setDescription("Where do you want to go?")
                .setDescriptionLocalizations({
                    "de": 'Wohin willst du gehen?',
                    "es-ES": '¬øA donde quieres ir?',
                    "fr": 'O√π veux-tu aller?',
                    "it": 'Dove vuoi andare?',
                    "pt-BR": 'Para onde deseja ir?',
                    "ru": '–ö—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–π—Ç–∏?'
                })
                .addChoices(
                    { name: 'üçÄ Overworld', value: '0' },
                    { name: 'üî• Nether', value: '1' }
                )),
    async execute({ client, user, interaction }) {

        let x = interaction.options.getInteger("x")
        let z = interaction.options.getInteger("z")

        // Do nether para a superf√≠cie ( *8 )
        let operacao = 0, caso = `üçÄ ${client.tls.phrase(user, "game.portal.superficie")} -> üî• Nether`, dimension = client.tls.phrase(user, "game.portal.na_superficie"), to_dimension = client.tls.phrase(user, "game.portal.o_nether")

        if (interaction.options.getString("destiny"))
            operacao = parseInt(interaction.options.getString("destiny"))

        if (operacao === 0) { // Para a superf√≠cie
            x /= 8, z /= 8

            caso = `üî• Nether -> üçÄ ${client.tls.phrase(user, "game.portal.superficie")}`, dimension = client.tls.phrase(user, "game.portal.no_nether"), to_dimension = client.tls.phrase(user, "game.portal.a_superficie")
        } else
            x *= 8, z *= 8

        let x_i = parseInt(x), z_i = parseInt(z)

        x = interaction.options.getInteger("x")
        z = interaction.options.getInteger("z")

        const embed = new EmbedBuilder()
            .setTitle(client.tls.phrase(user, "game.portal.titulo"))
            .setColor(client.embed_color(user.misc.color))
            .setDescription(client.replace(client.tls.phrase(user, "game.portal.descricao"), [client.emoji("mc_portal"), dimension, x_i, z_i, client.emoji("mc_portal_frame"), to_dimension, x, z]))
            .setFooter({
                text: caso,
                iconURL: interaction.user.avatarURL({ dynamic: true })
            })

        interaction.reply({
            embeds: [embed],
            ephemeral: client.decider(user?.conf.ghost_mode, 0)
        })
    }
}